import { Address } from "./accounts";
import { Block } from "./block";
import { Transaction } from "./transaction";
import { Node } from "./node";
export declare class Blockchain {
    static readonly GENESIS_BLOCK: Block;
    static readonly DIFFICULTY: number;
    static readonly TARGET: number;
    static readonly MINING_SENDER: string;
    static readonly MINING_REWARD: number;
    nodeId: string;
    nodes: Array<Node>;
    blocks: Array<Block>;
    pendingBlock: Block;
    minedTxAwaitingConsensus: Array<Transaction>;
    emittedTXMessages: Array<any>;
    transactionPool: Array<Transaction>;
    private storagePath;
    constructor(nodeId: string);
    register(node: Node): Node;
    updateAccounts(nodes: Array<Node>, currentNodeId: string): void;
    createAccount(address: Address, balance: number, account_type: string, nodeId: string): any;
    private save();
    private load();
    static verify(blocks: Array<Block>): boolean;
    private verify();
    consensus(blockchains: Array<Array<Block>>): boolean;
    static isPoWValid(pow: string): boolean;
    private mineBlock(transactions);
    private stateTransitionValidation(transaction);
    submitTransaction(transaction: Transaction, shouldValidate?: boolean): void;
    createBlock(): Block;
    getLastBlock(): Block;
    static now(): number;
    getBlockNumber(): number;
    getContracts(): any;
    submitContract(contractName: string, value: number, type: string, data: string): any;
}
