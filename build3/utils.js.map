{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from \"express\";\r\nimport axios from \"axios\";\r\nimport { serialize, deserialize } from \"serializer.ts/Serializer\";\r\nimport { Blockchain } from \"./blockchain\";\r\nimport { Node } from \"./node\";\r\nimport {\r\n  Transaction,\r\n  ContractTransaction,\r\n  AccountTransaction\r\n} from \"./transaction\";\r\nimport { Address, ContractAccount, CONTRACT_ACCOUNT } from \"./accounts\";\r\nimport { ACTIONS } from \"./actions\";\r\nimport { Block } from \"./block\";\r\n\r\nexport const getNodeAndAccountIndex = (\r\n  nodes: Array<Node>,\r\n  nodeId: string,\r\n  nodeAddress: Address,\r\n  errMsg: string,\r\n  type?: string\r\n) => {\r\n  if (type === ACTIONS.TRANSACTION_CONTRACT_ACCOUNT) {\r\n    return getNodeAndContractIndex(nodes, nodeId, nodeAddress, errMsg);\r\n  }\r\n\r\n  const nodeIdx = nodes.findIndex(node => node.id === nodeId);\r\n  if (nodeIdx === -1) {\r\n    throw new Error(`${errMsg} -> could not find nodeIdx of ${nodeId}`);\r\n  }\r\n\r\n  const accountIdx = nodes[nodeIdx].accounts.findIndex(\r\n    accnt => accnt.address === nodeAddress\r\n  );\r\n  if (accountIdx === -1) {\r\n    throw new Error(\r\n      `${errMsg} -> could not find accountIdx of ${nodeAddress} and nodeIdx ${nodeId}`\r\n    );\r\n  }\r\n\r\n  return {\r\n    nodeIdx,\r\n    accountIdx\r\n  };\r\n};\r\n\r\nexport const getNodeAndContractIndex = (\r\n  nodes: Array<Node>,\r\n  nodeId: string,\r\n  contractAddress: Address,\r\n  errMsg: string\r\n) => {\r\n  const nodeIdx = nodes.findIndex(node => node.id === nodeId);\r\n  if (nodeIdx === -1) {\r\n    throw new Error(\r\n      `utils.ts: getNodeAndContractIndex: ${errMsg} -> could not find accountIdx of ${nodeId}`\r\n    );\r\n  }\r\n\r\n  // Find contract by address\r\n  const accountIdx = nodes[nodeIdx].accounts.findIndex(\r\n    account =>\r\n      account.address === contractAddress && account.type === CONTRACT_ACCOUNT\r\n  );\r\n  if (accountIdx === -1) {\r\n    throw new Error(\r\n      `utils.ts: getNodeAndContractIndex: ${errMsg} -> could not find contractIndex of ${contractAddress}`\r\n    );\r\n  }\r\n\r\n  return {\r\n    nodeIdx,\r\n    accountIdx\r\n  };\r\n};\r\n\r\nexport const postAccountUpdates = (blockchain: Blockchain, nodeId: string) => {\r\n  const requests = blockchain.nodes\r\n    .filter(node => node.id !== nodeId)\r\n    .map(node =>\r\n      axios.post(`${node.url}updateAccountData`, {\r\n        sourceOfTruthNode: nodeId,\r\n        nodes: blockchain.nodes\r\n      })\r\n    );\r\n\r\n  if (requests.length === 0) {\r\n    return {\r\n      success: true,\r\n      msg: \"Utils: Post account updates, No nodes to update\"\r\n    };\r\n  }\r\n\r\n  axios\r\n    .all(requests)\r\n    .then(\r\n      axios.spread((...responses) => {\r\n        responses.map(res => console.log(res.data));\r\n      })\r\n    )\r\n    .catch(err => {\r\n      throw new Error(`Utils.ts: postAccountUpdates failed ${err}`);\r\n    });\r\n\r\n  return {\r\n    success: true,\r\n    msg: \"Utils.ts: Post accounts updates, successfully updated all nodes\"\r\n  };\r\n};\r\n\r\nexport const getConsensus = (\r\n  req: express.Request,\r\n  res: express.Response,\r\n  blockchain: Blockchain,\r\n  nodeId: string\r\n) => {\r\n  let propogateRes;\r\n  const requests = blockchain.nodes\r\n    .filter(node => node.id !== nodeId)\r\n    .map(node => axios.get(`${node.url}blocks`));\r\n\r\n  if (requests.length === 0) {\r\n    res.status(404);\r\n    res.json(\"There are no nodes to sync with!\");\r\n    return;\r\n  }\r\n\r\n  axios\r\n    .all(requests)\r\n    .then(\r\n      axios.spread(async (...blockchains) => {\r\n        if (\r\n          blockchain.consensus(\r\n            blockchains.map(res => {\r\n              return deserialize<Block[]>(Block, res.data);\r\n            })\r\n          )\r\n        ) {\r\n          // console.log(`Node ${nodeId} has reached a consensus on a new state.`);\r\n        } else {\r\n          console.log(`Node ${nodeId} has the longest chain.`);\r\n          // Propogate new account data to network\r\n          propogateRes = postAccountUpdates(blockchain, nodeId);\r\n        }\r\n      })\r\n    )\r\n    .catch(err => {\r\n      console.log(err);\r\n      res.status(500);\r\n      res.json(err);\r\n      return;\r\n    });\r\n};\r\n\r\nexport const getDigitalSignature = (\r\n  nodes: Array<Node>,\r\n  nodeId: string,\r\n  senderAddress: string,\r\n  action: string\r\n): any => {\r\n  const { nodeIdx, accountIdx } = getNodeAndAccountIndex(\r\n    nodes,\r\n    nodeId,\r\n    senderAddress,\r\n    \"Utils: getDigitalSignature \"\r\n  );\r\n\r\n  return nodes[nodeIdx].accounts[accountIdx].createDigitalSignature(action);\r\n};\r\n\r\nexport const verifyDigitalSignature = (\r\n  nodes: Array<Node>,\r\n  nodeId: string,\r\n  senderAddress: string,\r\n  signature: string,\r\n  action: string\r\n): boolean => {\r\n  const { nodeIdx, accountIdx } = getNodeAndAccountIndex(\r\n    nodes,\r\n    nodeId,\r\n    senderAddress,\r\n    \"Utils: verifyDigitalSignature \"\r\n  );\r\n\r\n  return !nodes[nodeIdx].accounts[accountIdx].verifyDigitalSignature(\r\n    action,\r\n    signature\r\n  )\r\n    ? false\r\n    : true;\r\n};\r\n\r\nexport const verifyNonce = (\r\n  nodes: Array<Node>,\r\n  nodeId: string,\r\n  nodeAddress: Address,\r\n  txNonce: number\r\n) => {\r\n  const { nodeIdx, accountIdx } = getNodeAndAccountIndex(\r\n    nodes,\r\n    nodeId,\r\n    nodeAddress,\r\n    \"Utils: verifyNonce \"\r\n  );\r\n\r\n  return txNonce === nodes[nodeIdx].accounts[accountIdx].nonce ? true : false;\r\n};\r\n\r\nexport const getBalance = (\r\n  nodes: Array<Node>,\r\n  nodeId: string,\r\n  nodeAddress: Address\r\n) => {\r\n  const { nodeIdx, accountIdx } = getNodeAndAccountIndex(\r\n    nodes,\r\n    nodeId,\r\n    nodeAddress,\r\n    \"Utils: getBalance \"\r\n  );\r\n  return nodes[nodeIdx].accounts[accountIdx].balance;\r\n};\r\n\r\nexport const getNodesRequestingTransactionWithBalance = (\r\n  nodes: Array<Node>,\r\n  transactionPool: Array<Transaction>\r\n) => {\r\n  const accountBalances: { [k: string]: any } = {};\r\n  // Filter transactions to only those moving funds\r\n  const filteredPool = transactionPool.filter(tx => {\r\n    return (\r\n      tx.transactionType === ACTIONS.TRANSACTION_EXTERNAL_ACCOUNT ||\r\n      tx.transactionType === ACTIONS.TRANSACTION_CONTRACT_ACCOUNT\r\n    );\r\n  });\r\n\r\n  filteredPool.forEach(tx => {\r\n    const { senderNodeId, senderAddress, transactionType } = tx;\r\n    const { nodeIdx, accountIdx } = getNodeAndAccountIndex(\r\n      nodes,\r\n      senderNodeId,\r\n      senderAddress,\r\n      \"Utils: getNodesRequestingTransactionWithBalance \",\r\n      transactionType\r\n    );\r\n    accountBalances[senderAddress] =\r\n      nodes[nodeIdx].accounts[accountIdx].balance;\r\n    return;\r\n  });\r\n\r\n  return accountBalances;\r\n};\r\n\r\nexport const isCrossOriginRequest = (\r\n  senderNodeId: string,\r\n  currentNodeId: string\r\n) => {\r\n  return senderNodeId !== currentNodeId;\r\n};\r\n\r\nexport const validateAdequateFunds = (\r\n  accountsWithBalance: any,\r\n  txpool: Array<Transaction>\r\n) => {\r\n  if (\r\n    Object.keys(accountsWithBalance).length === 0 &&\r\n    accountsWithBalance.constructor === Object\r\n  ) {\r\n    return txpool;\r\n  }\r\n\r\n  return txpool.filter(tx => {\r\n    if (\r\n      !(tx.transactionType === ACTIONS.TRANSACTION_CONTRACT_ACCOUNT) &&\r\n      !(tx.transactionType === ACTIONS.TRANSACTION_EXTERNAL_ACCOUNT)\r\n    ) {\r\n      return true; // This does not move funds, no validation needed\r\n    }\r\n\r\n    const newBalance = accountsWithBalance[tx.senderAddress] - tx.value;\r\n    if (newBalance < 0) {\r\n      console.log(\r\n        `${\r\n          tx.senderAddress\r\n        } did not have sufficient funds for tx. Removed from tx pool as invalid...`\r\n      );\r\n      return false;\r\n    }\r\n\r\n    accountsWithBalance[tx.senderAddress] -= tx.value;\r\n    return true;\r\n  });\r\n};\r\n\r\nexport const updateAccountsWithFinalizedTransactions = (\r\n  blockchain: Blockchain,\r\n  txpool: Array<any>\r\n) => {\r\n  txpool.forEach(tx => {\r\n    if (\r\n      !(tx.transactionType === ACTIONS.TRANSACTION_CONTRACT_ACCOUNT) &&\r\n      !(tx.transactionType === ACTIONS.TRANSACTION_EXTERNAL_ACCOUNT)\r\n    ) {\r\n      return; // This does not move funds, no validation needed\r\n    }\r\n\r\n    const { nodeIdx, accountIdx } = getNodeAndAccountIndex(\r\n      blockchain.nodes,\r\n      tx.senderNodeId,\r\n      tx.senderAddress,\r\n      \"Utils: updateAccountsWithFinalizedTransactions senderIndexes \"\r\n    );\r\n\r\n    if (tx.transactionType === ACTIONS.TRANSACTION_EXTERNAL_ACCOUNT) {\r\n      // Update sender account information\r\n      blockchain.nodes[nodeIdx].accounts[accountIdx].balance -= tx.value;\r\n\r\n      // Update account nonce\r\n      blockchain.nodes[nodeIdx].accounts[accountIdx].nonce++;\r\n\r\n      // Update receiver data\r\n      const receiverIndexes = getNodeAndAccountIndex(\r\n        blockchain.nodes,\r\n        tx.recipientNodeId,\r\n        tx.recipientAddress,\r\n        \"Utils: updateAcocuntsWithFinalizedTransaction recipientIndex \"\r\n      );\r\n      blockchain.nodes[receiverIndexes.nodeIdx].accounts[\r\n        receiverIndexes.accountIdx\r\n      ].balance +=\r\n        tx.value;\r\n    } else {\r\n      const parsedContract = ContractAccount.parseContractData(\r\n        blockchain,\r\n        nodeIdx,\r\n        accountIdx,\r\n        blockchain.nodes[nodeIdx].accounts[accountIdx].nonce\r\n      );\r\n\r\n      if (typeof parsedContract[tx.method] !== \"function\") {\r\n        throw new Error(\r\n          `server.ts: mutateContract -> method ${\r\n            tx.method\r\n          } does not exist on contract...`\r\n        );\r\n      }\r\n\r\n      const emittedTx =\r\n        tx.args.length === 0\r\n          ? parsedContract[tx.method]()\r\n          : parsedContract[tx.method](...tx.args);\r\n\r\n      if (emittedTx) {\r\n        blockchain.emittedTXMessages.push(emittedTx);\r\n      }\r\n\r\n      ContractAccount.updateContractState(\r\n        blockchain,\r\n        nodeIdx,\r\n        accountIdx,\r\n        parsedContract\r\n      );\r\n    }\r\n  });\r\n  blockchain.minedTxAwaitingConsensus = [];\r\n};\r\n\r\nexport const isPendingBlockInChain = (\r\n  pendingBlock: Block,\r\n  blocks: Array<Block>\r\n): boolean => {\r\n  if (!pendingBlock) return false;\r\n  return (\r\n    blocks.findIndex(\r\n      block => JSON.stringify(block) === JSON.stringify(pendingBlock)\r\n    ) !== -1\r\n  );\r\n};\r\n\r\nconst mapNodeIdToPort: any = {\r\n  A: \"3000\",\r\n  B: \"3001\",\r\n  C: \"3002\"\r\n};\r\n\r\nexport const emittableTXMessagesToTXPostReq = async (\r\n  nodeId: string,\r\n  emittedTXReqArr: Array<any>\r\n) => {\r\n  const requests = emittedTXReqArr.map(tx =>\r\n    axios.post(`http://localhost:${mapNodeIdToPort[nodeId]}/transactions`, tx)\r\n  );\r\n\r\n  if (requests.length === 0) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const res = await axios.all(requests);\r\n  } catch (e) {\r\n    console.log(`utils.ts: emittableTxMessagesToTXPostReq ${e}`);\r\n  }\r\n\r\n  return;\r\n};\r\n\r\nexport const getPublicKey = (\r\n  blockchain: Blockchain,\r\n  nodeId: string,\r\n  accountAddress: Address\r\n) => {\r\n  const { nodeIdx, accountIdx } = getNodeAndAccountIndex(\r\n    blockchain.nodes,\r\n    nodeId,\r\n    accountAddress,\r\n    \"Utils: getPublicKeys senderIndexes \"\r\n  );\r\n\r\n  return blockchain.nodes[nodeIdx].accounts[accountIdx].getPublicKey();\r\n};\r\n\r\nexport const encryptPasswords = (blockchain: Blockchain, password: string) => {\r\n  const passwordDictionary: any = {};\r\n  blockchain.nodes.forEach(node => {\r\n    node.accounts.forEach(account => {\r\n      if (account.type === CONTRACT_ACCOUNT) {\r\n        return;\r\n      }\r\n      passwordDictionary[account.address] = {\r\n        nodeId: node.id,\r\n        address: account.address,\r\n        encryptedPassword: account.encryptActionRequest(password)\r\n      };\r\n    });\r\n  });\r\n  return passwordDictionary;\r\n};\r\n"]}