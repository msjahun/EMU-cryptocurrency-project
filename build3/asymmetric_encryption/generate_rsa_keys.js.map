{"version":3,"file":"generate_rsa_keys.js","sourceRoot":"","sources":["../../src/asymmetric_encryption/generate_rsa_keys.ts"],"names":[],"mappings":";;AAAA,MAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC;AAC7C,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,MAAM,EAAE,GAAG,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;AAChD,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,MAAM,WAAW,GAAG,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;AAE1D,MAAM,kBAAkB,GAAG,gBAAgB,CAAC;AAE5C,MAAM,OAAO,GAAG,CAAC,QAAgB,EAAE,EAAE;IACnC,MAAM,GAAG,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACjD,MAAM,OAAO,GAAG,GAAG,CAAC,YAAY,EAAE,CAAC;IACnC,MAAM,MAAM,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;IACjC,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IACnD,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;IAEjD,OAAO,WAAW,CAAC,QAAQ,CAAC;SACzB,IAAI,CAAC,GAAG,EAAE;QACT,OAAO,QAAQ,CAAC,GAAG,CAAC;YAClB,EAAE,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;YAC5C,EAAE,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC;SAC3C,CAAC,CAAC;IACL,CAAC,CAAC;SACD,IAAI,CAAC,GAAG,EAAE;QACT,OAAO,GAAG,CAAC;IACb,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEW,QAAA,mBAAmB,GAAG,CAAC,WAAmB,EAAgB,EAAE;IACvE,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,kBAAkB,GAAG,WAAW,MAAM,CAAC,CAAC,CAAC,CAAC;AAC5E,CAAC,CAAC","sourcesContent":["const PromiseA = require(\"bluebird\").Promise;\r\nconst ursa = require(\"ursa\");\r\nconst fs = PromiseA.promisifyAll(require(\"fs\"));\r\nconst path = require(\"path\");\r\nconst mkdirpAsync = PromiseA.promisify(require(\"mkdirp\"));\r\n\r\nconst keyDirRelativePath = `../../RSAKeys/`;\r\n\r\nconst keypair = (pathname: string) => {\r\n  const key = ursa.generatePrivateKey(1024, 65537);\r\n  const privpem = key.toPrivatePem();\r\n  const pubpem = key.toPublicPem();\r\n  const privkey = path.join(pathname, \"privkey.pem\");\r\n  const pubkey = path.join(pathname, \"pubkey.pem\");\r\n\r\n  return mkdirpAsync(pathname)\r\n    .then(() => {\r\n      return PromiseA.all([\r\n        fs.writeFileAsync(privkey, privpem, \"ascii\"),\r\n        fs.writeFileAsync(pubkey, pubpem, \"ascii\")\r\n      ]);\r\n    })\r\n    .then(() => {\r\n      return key;\r\n    });\r\n};\r\n\r\nexport const generateAccountKeys = (accountName: string): Promise<any> => {\r\n  return PromiseA.all([keypair(`${keyDirRelativePath}${accountName}Keys`)]);\r\n};\r\n"]}