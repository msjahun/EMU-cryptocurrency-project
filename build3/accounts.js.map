{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../src/accounts.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,yBAAyB;AAEzB,6BAA6B;AAC7B,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAG7B,iFAAgF;AAChF,+CAAwE;AAM3D,QAAA,gBAAgB,GAAG,kBAAkB,CAAC;AACtC,QAAA,gBAAgB,GAAG,kBAAkB,CAAC;AAEnD;IAME,YAAY,OAAgB,EAAE,OAAe,EAAE,IAAY;QACzD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IACjB,CAAC;CACF;AAZD,0BAYC;AAED,qBAA6B,SAAQ,OAAO;IAK1C,YAAY,OAAgB,EAAE,OAAe,EAAE,IAAY,EAAE,EAAU;QACrE,KAAK,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAC7B,SAAS,EACT,KAAK,EACL,SAAS,EACT,GAAG,OAAO,MAAM,CACjB,CAAC;QAEF,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAED,iBAAiB,CACf,YAAoB,EACpB,aAAsB,EACtB,gBAAyB,EACzB,eAAuB,EACvB,KAAa,EACb,MAAc,EACd,gBAAwB;QAExB,OAAO,IAAI,gCAAkB,CAC3B,YAAY,EACZ,aAAa,EACb,gBAAgB,EAChB,eAAe,EACf,KAAK,EACL,MAAM,EACN,IAAI,CAAC,KAAK,EACV,gBAAgB,CACjB,CAAC;IACJ,CAAC;IAEK,aAAa,CAAC,OAAgB;;YAClC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,MAAM,uCAAmB,CAAC,OAAO,CAAC,CAAC;YAC/D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,CACrC,EAAE,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,WAAW,cAAc,CAAC,CACnD,CAAC;YACF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,eAAe,CACnC,EAAE,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,WAAW,aAAa,CAAC,CAClD,CAAC;QACJ,CAAC;KAAA;IAED,YAAY;QACV,OAAO,EAAE,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,WAAW,aAAa,EAAE,MAAM,CAAC,CAAC;IACnE,CAAC;IAED,uEAAuE;IACvE,oBAAoB,CAAC,MAAc;QACjC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC1D,CAAC;IAED,oBAAoB,CAAC,MAAc;QACjC,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IAC3D,CAAC;IAED,sBAAsB,CAAC,MAAc;QACnC,OAAO,IAAI,CAAC,UAAU,CAAC,WAAW,CAChC,QAAQ,EACR,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,EAC3B,MAAM,EACN,QAAQ,CACT,CAAC;IACJ,CAAC;IAED,sBAAsB,CAAC,MAAc,EAAE,SAAiB;QACtD,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,CACjC,QAAQ,EACR,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,EAC3B,SAAS,EACT,QAAQ,CACT,CAAC;IACJ,CAAC;CACF;AA9ED,0CA8EC;AAED,qBAA6B,SAAQ,OAAO;IAG1C,YAAY,OAAgB,EAAE,OAAe,EAAE,IAAY,EAAE,IAAS;QACpE,KAAK,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,gCAAgC;IAChC,MAAM,CAAC,QAAQ,CAAC,GAAQ,EAAE,KAAU;QAClC,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE;YAC/B,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;SACzB;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,6BAA6B;IAC7B,MAAM,CAAC,OAAO,CAAC,GAAQ,EAAE,KAAU;QACjC,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;YACjE,IAAI,gBAAgB,GAAG,IAAI,KAAK,GAAG,CAAC;YACpC,OAAO,IAAI,CAAC,gBAAgB,CAAC,CAAC;SAC/B;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,MAAM,CAAC,iBAAiB,CACtB,UAAsB,EACtB,OAAe,EACf,WAAmB,EACnB,KAAa;QAEb,IAAI,KAAK,KAAK,CAAC,EAAE;YACf,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC;SACnE;QACD,OAAO,IAAI,CAAC,KAAK,CACf,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAI,EACpD,IAAI,CAAC,OAAO,CACb,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,mBAAmB,CACxB,UAAsB,EACtB,OAAe,EACf,WAAmB,EACnB,cAAmB;QAEnB,wBAAwB;QACxB,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CACnE,cAAc,EACd,IAAI,CAAC,QAAQ,CACd,CAAC;QACF,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,KAAK,EAAE,CAAC;IAC1D,CAAC;CACF;AArDD,0CAqDC","sourcesContent":["import * as fs from \"fs\";\r\nimport axios from \"axios\";\r\nimport * as path from \"path\";\r\nconst ursa = require(\"ursa\");\r\nimport { Blockchain } from \"./blockchain\";\r\nimport { Node } from \"./node\";\r\nimport { generateAccountKeys } from \"./asymmetric_encryption/generate_rsa_keys\";\r\nimport { AccountTransaction, ContractTransaction } from \"./transaction\";\r\nimport { ACTIONS } from \"./actions\";\r\n\r\nexport type Address = string;\r\nexport type EXTERNAL_ACCOUNT_TYPE = Address;\r\nexport type CONTRACT_ACCOUNT_TYPE = Address;\r\nexport const CONTRACT_ACCOUNT = \"CONTRACT_ACCOUNT\";\r\nexport const EXTERNAL_ACCOUNT = \"EXTERNAL_ACCOUNT\";\r\n\r\nexport class Account {\r\n  public address: Address;\r\n  public balance: number;\r\n  public type: string;\r\n  public nonce: number;\r\n\r\n  constructor(address: Address, balance: number, type: string) {\r\n    this.address = address;\r\n    this.balance = balance;\r\n    this.type = type;\r\n    this.nonce = 0;\r\n  }\r\n}\r\n\r\nexport class ExternalAccount extends Account {\r\n  public publicKey: any;\r\n  private privateKey: any;\r\n  private storagePath: string;\r\n\r\n  constructor(address: Address, balance: number, type: string, id: string) {\r\n    super(address, balance, type);\r\n    this.storagePath = path.resolve(\r\n      __dirname,\r\n      \"../\",\r\n      \"RSAKeys\",\r\n      `${address}Keys`\r\n    );\r\n\r\n    this.createRSAKeys(address);\r\n  }\r\n\r\n  createTransaction(\r\n    senderNodeId: string,\r\n    senderAddress: Address,\r\n    recipientAddress: Address,\r\n    recipientNodeId: string,\r\n    value: number,\r\n    action: string,\r\n    digitalSignature: string\r\n  ) {\r\n    return new AccountTransaction(\r\n      senderNodeId,\r\n      senderAddress,\r\n      recipientAddress,\r\n      recipientNodeId,\r\n      value,\r\n      action,\r\n      this.nonce,\r\n      digitalSignature\r\n    );\r\n  }\r\n\r\n  async createRSAKeys(address: Address) {\r\n    const { privpem, pubpem } = await generateAccountKeys(address);\r\n    this.privateKey = ursa.createPrivateKey(\r\n      fs.readFileSync(`${this.storagePath}/privkey.pem`)\r\n    );\r\n    this.publicKey = ursa.createPublicKey(\r\n      fs.readFileSync(`${this.storagePath}/pubkey.pem`)\r\n    );\r\n  }\r\n\r\n  getPublicKey() {\r\n    return fs.readFileSync(`${this.storagePath}/pubkey.pem`, \"utf8\");\r\n  }\r\n\r\n  // TODO: Encrypting usually work with someone elses key.. This is weird\r\n  encryptActionRequest(action: string): string {\r\n    return this.publicKey.encrypt(action, \"utf8\", \"base64\");\r\n  }\r\n\r\n  decryptActionRequest(action: string): string {\r\n    return this.privateKey.decrypt(action, \"base64\", \"utf8\");\r\n  }\r\n\r\n  createDigitalSignature(action: string): string {\r\n    return this.privateKey.hashAndSign(\r\n      \"sha256\",\r\n      Buffer.from(action, \"utf8\"),\r\n      \"utf8\",\r\n      \"base64\"\r\n    );\r\n  }\r\n\r\n  verifyDigitalSignature(action: string, signature: string) {\r\n    return this.publicKey.hashAndVerify(\r\n      \"sha256\",\r\n      Buffer.from(action, \"utf8\"),\r\n      signature,\r\n      \"base64\"\r\n    );\r\n  }\r\n}\r\n\r\nexport class ContractAccount extends Account {\r\n  public data: any;\r\n  public updatedData: any;\r\n  constructor(address: Address, balance: number, type: string, data: any) {\r\n    super(address, balance, type);\r\n    this.data = data;\r\n  }\r\n\r\n  // Stringifying contract to JSON\r\n  static replacer(key: any, value: any) {\r\n    if (typeof value === \"function\") {\r\n      return value.toString();\r\n    }\r\n    return value;\r\n  }\r\n\r\n  // Parse stringified contract\r\n  static reviver(key: any, value: any) {\r\n    if (typeof value === \"string\" && value.indexOf(\"function \") === 0) {\r\n      let functionTemplate = `(${value})`;\r\n      return eval(functionTemplate);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  static parseContractData(\r\n    blockchain: Blockchain,\r\n    nodeIdx: number,\r\n    contractIdx: number,\r\n    nonce: number\r\n  ): any {\r\n    if (nonce === 0) {\r\n      return eval(blockchain.nodes[nodeIdx].accounts[contractIdx].data);\r\n    }\r\n    return JSON.parse(\r\n      blockchain.nodes[nodeIdx].accounts[contractIdx].data,\r\n      this.reviver\r\n    );\r\n  }\r\n\r\n  static updateContractState(\r\n    blockchain: Blockchain,\r\n    nodeIdx: number,\r\n    contractIdx: number,\r\n    parsedContract: any\r\n  ): any {\r\n    // Update Contract State\r\n    blockchain.nodes[nodeIdx].accounts[contractIdx].data = JSON.stringify(\r\n      parsedContract,\r\n      this.replacer\r\n    );\r\n    blockchain.nodes[nodeIdx].accounts[contractIdx].nonce++;\r\n  }\r\n}\r\n"]}