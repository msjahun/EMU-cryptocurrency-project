{"version":3,"file":"11_mining_api.js","sourceRoot":"","sources":["../../src/workshop/11_mining_api.ts"],"names":[],"mappings":"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","sourcesContent":["import { sha256 } from \"js-sha256\";\r\nimport { serialize, deserialize } from \"serializer.ts/Serializer\";\r\nimport BigNumber from \"bignumber.js\";\r\n\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nimport deepEqual = require(\"deep-equal\");\r\n\r\nimport * as uuidv4 from \"uuid/v4\";\r\nimport * as express from \"express\";\r\nimport * as bodyParser from \"body-parser\";\r\n\r\nexport type Address = string;\r\n\r\nexport class Transaction {\r\n  public senderAddress: Address;\r\n  public recipientAddress: Address;\r\n  public value: number;\r\n\r\n  constructor(senderAddress: Address, recipientAddress: Address, value: number) {\r\n    this.senderAddress = senderAddress;\r\n    this.recipientAddress = recipientAddress;\r\n    this.value = value;\r\n  }\r\n}\r\n\r\nexport class Block {\r\n  public blockNumber: number;\r\n  public transactions: Array<Transaction>;\r\n  public timestamp: number;\r\n  public nonce: number;\r\n  public prevBlock: string;\r\n\r\n  constructor(blockNumber: number, transactions: Array<Transaction>, timestamp: number, nonce: number,\r\n    prevBlock: string) {\r\n    this.blockNumber = blockNumber;\r\n    this.transactions = transactions;\r\n    this.timestamp = timestamp;\r\n    this.nonce = nonce;\r\n    this.prevBlock = prevBlock;\r\n  }\r\n\r\n  // Calculates the SHA256 of the entire block, including its transactions.\r\n  public sha256(): string {\r\n    return sha256(JSON.stringify(serialize<Block>(this)));\r\n  }\r\n}\r\n\r\nexport class Blockchain {\r\n  // Let's define that our \"genesis\" block as an empty block, starting from the January 1, 1970 (midnight \"UTC\").\r\n  public static readonly GENESIS_BLOCK = new Block(0, [], 0, 0, \"fiat lux\");\r\n\r\n  public static readonly DIFFICULTY = 4;\r\n  public static readonly TARGET = 2 ** (256 - Blockchain.DIFFICULTY);\r\n\r\n  public static readonly MINING_SENDER = \"<COINBASE>\";\r\n  public static readonly MINING_REWARD = 50;\r\n\r\n  public nodeId: string;\r\n  public blocks: Array<Block>;\r\n  public transactionPool: Array<Transaction>;\r\n  private storagePath: string;\r\n\r\n  constructor(nodeId: string) {\r\n    this.nodeId = nodeId;\r\n    this.transactionPool = [];\r\n\r\n    this.storagePath = path.resolve(__dirname, \"../\", `${this.nodeId}.blockchain`);\r\n\r\n    // Load the blockchain from the storage.\r\n    this.load();\r\n  }\r\n\r\n  // Saves the blockchain to the disk.\r\n  private save() {\r\n    fs.writeFileSync(this.storagePath, JSON.stringify(serialize(this.blocks), undefined, 2), \"utf8\");\r\n  }\r\n\r\n  // Loads the blockchain from the disk.\r\n  private load() {\r\n    try {\r\n      this.blocks = deserialize<Block[]>(Block, JSON.parse(fs.readFileSync(this.storagePath, \"utf8\")));\r\n    } catch (err) {\r\n      if (err.code !== \"ENOENT\") {\r\n        throw err;\r\n      }\r\n\r\n      this.blocks = [Blockchain.GENESIS_BLOCK];\r\n    } finally {\r\n      this.verify();\r\n    }\r\n  }\r\n\r\n  // Verifies the blockchain.\r\n  private verify() {\r\n    // The blockchain can't be empty. It should always contain at least the genesis block.\r\n    if (this.blocks.length === 0) {\r\n      throw new Error(\"Blockchain can't be empty!\");\r\n    }\r\n\r\n    // The first block has to be the genesis block.\r\n    if (!deepEqual(this.blocks[0], Blockchain.GENESIS_BLOCK)) {\r\n      throw new Error(\"Invalid first block!\");\r\n    }\r\n\r\n    // Verify the chain itself.\r\n    for (let i = 1; i < this.blocks.length; ++i) {\r\n      const current = this.blocks[i];\r\n\r\n      // Verify block number.\r\n      if (current.blockNumber !== i) {\r\n        throw new Error(`Invalid block number ${current.blockNumber} for block #${i}!`);\r\n      }\r\n\r\n      // Verify that the current blocks properly points to the previous block.\r\n      const previous = this.blocks[i - 1];\r\n      if (current.prevBlock !== previous.sha256()) {\r\n        throw new Error(`Invalid previous block hash for block #${i}!`);\r\n      }\r\n\r\n      // Verify the difficutly of the PoW.\r\n      //\r\n      // TODO: what if the diffuclty was adjusted?\r\n      if (!Blockchain.isPoWValid(current.sha256())) {\r\n        throw new Error(`Invalid previous block hash's difficutly for block #${i}!`);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Validates PoW.\r\n  public static isPoWValid(pow: string): boolean {\r\n    try {\r\n      if (!pow.startsWith(\"0x\")) {\r\n        pow = `0x${pow}`;\r\n      }\r\n\r\n      return new BigNumber(pow).lessThanOrEqualTo(Blockchain.TARGET.toString());\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Mines for block.\r\n  private mineBlock(transactions: Array<Transaction>): Block {\r\n    // Create a new block which will \"point\" to the last block.\r\n    const lastBlock = this.getLastBlock();\r\n    const newBlock = new Block(lastBlock.blockNumber + 1, transactions, Blockchain.now(), 0, lastBlock.sha256());\r\n\r\n    while (true) {\r\n      const pow = newBlock.sha256();\r\n      console.log(`Mining #${newBlock.blockNumber}: nonce: ${newBlock.nonce}, pow: ${pow}`);\r\n\r\n      if (Blockchain.isPoWValid(pow)) {\r\n        console.log(`Found valid POW: ${pow}!`);\r\n        break;\r\n      }\r\n\r\n      newBlock.nonce++;\r\n    }\r\n\r\n    return newBlock;\r\n  }\r\n\r\n  // Submits new transaction\r\n  public submitTransaction(senderAddress: Address, recipientAddress: Address, value: number) {\r\n    this.transactionPool.push(new Transaction(senderAddress, recipientAddress, value));\r\n  }\r\n\r\n  // Creates new block on the blockchain.\r\n  public createBlock(): Block {\r\n    // Add a \"coinbase\" transaction granting us the mining reward!\r\n    const transactions = [new Transaction(Blockchain.MINING_SENDER, this.nodeId, Blockchain.MINING_REWARD),\r\n      ...this.transactionPool];\r\n\r\n    // Mine the transactions in a new block.\r\n    const newBlock = this.mineBlock(transactions);\r\n\r\n    // Append the new block to the blockchain.\r\n    this.blocks.push(newBlock);\r\n\r\n    // Remove the mined transactions.\r\n    this.transactionPool = [];\r\n\r\n    // Save the blockchain to the storage.\r\n    this.save();\r\n\r\n    return newBlock;\r\n  }\r\n\r\n  public getLastBlock(): Block {\r\n    return this.blocks[this.blocks.length - 1];\r\n  }\r\n\r\n  public static now(): number {\r\n    return Math.round(new Date().getTime() / 1000);\r\n  }\r\n}\r\n\r\n// Web server\r\nconst PORT = 3000;\r\nconst app = express();\r\nconst nodeId = uuidv4();\r\nconst blockchain = new Blockchain(nodeId);\r\n\r\n// Set up bodyParser:\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(bodyParser.json());\r\napp.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {\r\n  console.error(err.stack);\r\n\r\n  res.status(500);\r\n});\r\n\r\n// Show all the blocks.\r\napp.get(\"/blocks\", (req: express.Request, res: express.Response) => {\r\n  res.json(serialize(blockchain.blocks));\r\n});\r\n\r\n// Show specific block.\r\napp.get(\"/blocks/:id\", (req: express.Request, res: express.Response) => {\r\n  const id = Number(req.params.id);\r\n  if (isNaN(id)) {\r\n    res.json(\"Invalid parameter!\");\r\n    res.status(500);\r\n    return;\r\n  }\r\n\r\n  if (id >= blockchain.blocks.length) {\r\n    res.json(`Block #${id} wasn't found!`);\r\n    res.status(404);\r\n    return;\r\n  }\r\n\r\n  res.json(serialize(blockchain.blocks[id]));\r\n});\r\n\r\napp.post(\"/blocks/mine\", (req: express.Request, res: express.Response) => {\r\n  // Mine the new block.\r\n  const newBlock = blockchain.createBlock();\r\n\r\n  res.json(`Mined new block #${newBlock.blockNumber}`);\r\n});\r\n\r\n// Show all transactions in the transaction pool.\r\napp.get(\"/transactions\", (req: express.Request, res: express.Response) => {\r\n  res.json(serialize(blockchain.transactionPool));\r\n});\r\n\r\napp.post(\"/transactions\", (req: express.Request, res: express.Response) => {\r\n  const senderAddress = req.body.senderAddress;\r\n  const recipientAddress = req.body.recipientAddress;\r\n  const value = Number(req.body.value);\r\n\r\n  if (!senderAddress || !recipientAddress || !value)  {\r\n    res.json(\"Invalid parameters!\");\r\n    res.status(500);\r\n    return;\r\n  }\r\n\r\n  blockchain.submitTransaction(senderAddress, recipientAddress, value);\r\n\r\n  res.json(`Transaction from ${senderAddress} to ${recipientAddress} was added successfully`);\r\n});\r\n\r\nif (!module.parent) {\r\n  app.listen(PORT);\r\n\r\n  console.log(`Web server started on port ${PORT}. Node ID is: ${nodeId}`);\r\n}\r\n"]}