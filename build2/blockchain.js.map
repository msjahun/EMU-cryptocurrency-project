{"version":3,"file":"blockchain.js","sourceRoot":"","sources":["../src/blockchain.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nimport { Set } from \"typescript-collections\";\r\nimport { serialize, deserialize } from \"serializer.ts/Serializer\";\r\nimport BigNumber from \"bignumber.js\";\r\nimport deepEqual = require(\"deep-equal\");\r\nimport {\r\n  Address,\r\n  Account,\r\n  ExternalAccount,\r\n  ContractAccount,\r\n  CONTRACT_ACCOUNT,\r\n  EXTERNAL_ACCOUNT\r\n} from \"./accounts\";\r\nimport { ACTIONS } from \"./actions\";\r\nimport { Block } from \"./block\";\r\nimport {\r\n  Transaction,\r\n  AccountTransaction,\r\n  ContractTransaction\r\n} from \"./transaction\";\r\nimport { Node } from \"./node\";\r\nimport {\r\n  verifyDigitalSignature,\r\n  verifyNonce,\r\n  getDigitalSignature,\r\n  getNodesRequestingTransactionWithBalance,\r\n  validateAdequateFunds,\r\n  updateAccountsWithFinalizedTransactions,\r\n  isCrossOriginRequest,\r\n  getNodeAndAccountIndex,\r\n  isPendingBlockInChain,\r\n  emittableTXMessagesToTXPostReq\r\n} from \"./utils\";\r\nimport { currentId } from \"async_hooks\";\r\nexport class Blockchain {\r\n  // Let's define that our \"genesis\" block as an empty block, starting from the January 1, 1970 (midnight \"UTC\").\r\n  public static readonly GENESIS_BLOCK = new Block(0, [], 0, 0, \"Mr Felix EMU 2018 Genesis block\");\r\n\r\n  public static readonly DIFFICULTY = 4;\r\n  public static readonly TARGET = 2 ** (256 - Blockchain.DIFFICULTY);\r\n\r\n  public static readonly MINING_SENDER = \"<COINBASE>\";\r\n  public static readonly MINING_REWARD = 50;\r\n\r\n  public nodeId: string;\r\n  public nodes: Array<Node>;\r\n  public blocks: Array<Block>;\r\n  public pendingBlock: Block;\r\n  public minedTxAwaitingConsensus: Array<Transaction>;\r\n  public emittedTXMessages: Array<any>;\r\n  public transactionPool: Array<Transaction>;\r\n  private storagePath: string;\r\n\r\n  constructor(nodeId: string) {\r\n    this.nodeId = nodeId;\r\n    this.nodes = [];\r\n    this.transactionPool = [];\r\n    this.pendingBlock = undefined;\r\n    this.minedTxAwaitingConsensus = [];\r\n    this.emittedTXMessages = [];\r\n    this.storagePath = path.resolve(\r\n      __dirname,\r\n      \"../\",\r\n      `${this.nodeId}.blockchain`\r\n    );\r\n\r\n    // Load the blockchain from the storage.\r\n    this.load();\r\n  }\r\n\r\n  // Registers new node.\r\n  public register(node: Node): Node {\r\n    this.nodes.push(node);\r\n    return this.nodes[this.nodes.length - 1];\r\n  }\r\n\r\n  public updateAccounts(nodes: Array<Node>, currentNodeId: string) {\r\n    this.nodes.forEach(node => {\r\n      node.accounts.forEach(account => {\r\n        // Update Contract Account\r\n        if (account.type === CONTRACT_ACCOUNT) {\r\n          const nodeIdx = nodes.findIndex(node => node.id === currentNodeId);\r\n          if (nodeIdx === -1) {\r\n            throw new Error(\r\n              `blockchain.ts: updateAccounts: could not find contract account nodeId ${currentNodeId} `\r\n            );\r\n          }\r\n\r\n          const accountIdx = nodes[nodeIdx].accounts.findIndex(\r\n            accnt => accnt.address === account.address\r\n          );\r\n          if (accountIdx === -1) {\r\n            throw new Error(\r\n              `blockchain.ts: updateAccounts: could not find contract account ${currentNodeId} ${\r\n                account.address\r\n              } `\r\n            );\r\n          }\r\n\r\n          account.data = nodes[nodeIdx].accounts[accountIdx].data;\r\n          account.balance = nodes[nodeIdx].accounts[accountIdx].balance;\r\n          account.nonce = nodes[nodeIdx].accounts[accountIdx].nonce;\r\n          return;\r\n        }\r\n\r\n        // Update External Account\r\n        const { nodeIdx, accountIdx } = getNodeAndAccountIndex(\r\n          nodes,\r\n          node.id,\r\n          account.address,\r\n          `blockchain.ts: updateAccounts -> could not find indexes...`\r\n        );\r\n\r\n        account.balance = nodes[nodeIdx].accounts[accountIdx].balance;\r\n        account.nonce = nodes[nodeIdx].accounts[accountIdx].nonce;\r\n      });\r\n    });\r\n  }\r\n\r\n  public createAccount(\r\n    address: Address,\r\n    balance: number,\r\n    account_type: string,\r\n    nodeId: string\r\n  ): any {\r\n    let createdAccount = undefined;\r\n    const nodeIdx = this.nodes.findIndex(node => node.id === nodeId);\r\n\r\n    if (account_type === EXTERNAL_ACCOUNT) {\r\n      const external_accnt = new ExternalAccount(\r\n        address,\r\n        balance,\r\n        account_type,\r\n        \"randomId\"\r\n      );\r\n      this.nodes[nodeIdx].accounts.push(external_accnt);\r\n    } else {\r\n      const contract_accnt = new ContractAccount(\r\n        address,\r\n        balance,\r\n        account_type,\r\n        \"randomId\"\r\n      );\r\n      this.nodes[nodeIdx].accounts.push(contract_accnt);\r\n    }\r\n\r\n    // Submit Account_Creation Transaction\r\n    this.submitTransaction(\r\n      new AccountTransaction(\r\n        nodeId,\r\n        address,\r\n        \"NONE\",\r\n        \"NONE\",\r\n        balance,\r\n        ACTIONS.CREATE_EXTERNAL_ACCOUNT,\r\n        undefined\r\n      ),\r\n      false\r\n    ); // can't verify before account is created,\r\n    return this.nodes[nodeIdx].accounts[\r\n      this.nodes[nodeIdx].accounts.length - 1\r\n    ];\r\n  }\r\n\r\n  // Saves the blockchain to the disk.\r\n  private save() {\r\n    fs.writeFileSync(\r\n      this.storagePath,\r\n      JSON.stringify(serialize(this.blocks), undefined, 2),\r\n      \"utf8\"\r\n    );\r\n  }\r\n\r\n  // Loads the blockchain from the disk.\r\n  private load() {\r\n    try {\r\n      this.blocks = deserialize<Block[]>(\r\n        Block,\r\n        JSON.parse(fs.readFileSync(this.storagePath, \"utf8\"))\r\n      );\r\n    } catch (err) {\r\n      if (err.code !== \"ENOENT\") {\r\n        throw err;\r\n      }\r\n\r\n      this.blocks = [Blockchain.GENESIS_BLOCK];\r\n    } finally {\r\n      this.verify();\r\n    }\r\n  }\r\n\r\n  // Verifies the blockchain.\r\n  public static verify(blocks: Array<Block>): boolean {\r\n    try {\r\n      // The blockchain can't be empty. It should always contain at least the genesis block.\r\n      if (blocks.length === 0) {\r\n        throw new Error(\"Blockchain can't be empty!\");\r\n      }\r\n\r\n      // The first block has to be the genesis block.\r\n      if (!deepEqual(blocks[0], Blockchain.GENESIS_BLOCK)) {\r\n        throw new Error(\"Invalid first block!\");\r\n      }\r\n\r\n      // Verify the chain itself.\r\n      for (let i = 1; i < blocks.length; ++i) {\r\n        const current = blocks[i];\r\n\r\n        // Verify block number.\r\n        if (current.blockNumber !== i) {\r\n          throw new Error(\r\n            `Invalid block number ${current.blockNumber} for block #${i}!`\r\n          );\r\n        }\r\n\r\n        // Verify that the current blocks properly points to the previous block.\r\n        const previous = blocks[i - 1];\r\n        if (current.prevBlock !== previous.sha256()) {\r\n          throw new Error(`Invalid previous block hash for block #${i}!`);\r\n        }\r\n\r\n        if (!this.isPoWValid(current.sha256())) {\r\n          throw new Error(\r\n            `Invalid previous block hash's difficutly for block #${i}!`\r\n          );\r\n        }\r\n      }\r\n\r\n      return true;\r\n    } catch (err) {\r\n      console.error(err);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Verifies the blockchain.\r\n  private verify() {\r\n    // The blockchain can't be empty. It should always contain at least the genesis block.\r\n    if (!Blockchain.verify(this.blocks)) {\r\n      throw new Error(\"Invalid blockchain!\");\r\n    }\r\n  }\r\n\r\n  // Receives candidate blockchains, verifies them, and if a longer and valid alternative is found - uses it to replace\r\n  // our own.\r\n  public consensus(blockchains: Array<Array<Block>>): boolean {\r\n    // Iterate over the proposed candidates and find the longest, valid, candidate.\r\n    let maxLength: number = 0;\r\n    let bestCandidateIndex: number = -1;\r\n\r\n    for (let i = 0; i < blockchains.length; ++i) {\r\n      const candidate = blockchains[i];\r\n\r\n      // Don't bother validating blockchains shorther than the best candidate so far.\r\n      if (candidate.length <= maxLength) {\r\n        continue;\r\n      }\r\n\r\n      // Found a good candidate?\r\n      if (Blockchain.verify(candidate)) {\r\n        maxLength = candidate.length;\r\n        bestCandidateIndex = i;\r\n      }\r\n    }\r\n    // Compare the candidate and consider to use it.\r\n    if (\r\n      bestCandidateIndex !== -1 &&\r\n      (maxLength > this.blocks.length || !Blockchain.verify(this.blocks))\r\n    ) {\r\n      this.blocks = blockchains[bestCandidateIndex];\r\n\r\n      this.save();\r\n\r\n      return true;\r\n    }\r\n\r\n    // Network has reach consensus regarding new block with transactions. Update nodes accordingly.\r\n    if (isPendingBlockInChain(this.pendingBlock, this.blocks)) {\r\n      updateAccountsWithFinalizedTransactions(\r\n        this,\r\n        this.minedTxAwaitingConsensus\r\n      );\r\n      emittableTXMessagesToTXPostReq(this.nodeId, this.emittedTXMessages);\r\n      this.emittedTXMessages = [];\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // Validates PoW.\r\n  public static isPoWValid(pow: string): boolean {\r\n    try {\r\n      if (!pow.startsWith(\"0x\")) {\r\n        pow = `0x${pow}`;\r\n      }\r\n\r\n      return new BigNumber(pow).lessThanOrEqualTo(Blockchain.TARGET.toString());\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Mines for block.\r\n  private mineBlock(transactions: Array<Transaction>): Block {\r\n    // Create a new block which will \"point\" to the last block.\r\n    const lastBlock = this.getLastBlock();\r\n    const newBlock = new Block(\r\n      lastBlock.blockNumber + 1,\r\n      transactions,\r\n      Blockchain.now(),\r\n      0,\r\n      lastBlock.sha256()\r\n    );\r\n\r\n    // Indefinitely until we find valid proof of work\r\n    while (true) {\r\n      const pow = newBlock.sha256();\r\n      // console.log(\r\n      //   `Mining #${newBlock.blockNumber}: nonce: ${newBlock.nonce}, pow: ${pow}`\r\n      // );\r\n\r\n      if (Blockchain.isPoWValid(pow)) {\r\n        // console.log(`Found valid POW: ${pow}!`);\r\n        break;\r\n      }\r\n\r\n      newBlock.nonce++;\r\n    }\r\n\r\n    return newBlock;\r\n  }\r\n\r\n  private stateTransitionValidation(transaction: Transaction): any {\r\n    const isTransactionSigValid = verifyDigitalSignature(\r\n      this.nodes,\r\n      transaction.senderNodeId,\r\n      transaction.senderAddress,\r\n      transaction.senderDigitalSignature,\r\n      transaction.transactionType\r\n    );\r\n\r\n    if (!isTransactionSigValid) {\r\n      throw new Error(\r\n        \"Submit Transaction Request: Transaction signature is invalid!\"\r\n      );\r\n    }\r\n\r\n    const isNonceValid = verifyNonce(\r\n      this.nodes,\r\n      transaction.senderNodeId,\r\n      transaction.senderAddress,\r\n      transaction.nonce\r\n    );\r\n    if (!isNonceValid) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public submitTransaction(transaction: Transaction, shouldValidate = true) {\r\n    // Get sender signature\r\n    if (shouldValidate) {\r\n      const valid = this.stateTransitionValidation(transaction);\r\n      if (!valid) return;\r\n    }\r\n\r\n    // State Transition Validation\r\n    this.transactionPool.push(transaction);\r\n  }\r\n\r\n  public createBlock(): Block {\r\n    const accountsWithBalances = getNodesRequestingTransactionWithBalance(\r\n      this.nodes,\r\n      this.transactionPool\r\n    );\r\n\r\n    // This filters transaction requests that would make the senders balance negative.\r\n    const validatedTxPool = validateAdequateFunds(\r\n      accountsWithBalances,\r\n      this.transactionPool\r\n    );\r\n\r\n    const transactions = [\r\n      new Transaction(\r\n        Blockchain.MINING_SENDER,\r\n        \"NONE\",\r\n        \"NONE\",\r\n        this.nodeId,\r\n        Blockchain.MINING_REWARD,\r\n        ACTIONS.MINING_REWARD,\r\n        -1\r\n      ),\r\n      ...validatedTxPool\r\n    ];\r\n\r\n    // Mine the transactions in a new block.\r\n    const newBlock = this.mineBlock(transactions);\r\n\r\n    // These are not finalized as part of the public ledger until there is a consensus\r\n    this.pendingBlock = newBlock;\r\n    // These transactions should update new balances only after they are being written to global blockchain\r\n    this.minedTxAwaitingConsensus.push(...transactions);\r\n\r\n    // Append the new block to the blockchain.\r\n    this.blocks.push(newBlock);\r\n\r\n    // Empty current tx pool\r\n    this.transactionPool = [];\r\n\r\n    // Save the blockchain to the storage.\r\n    this.save();\r\n\r\n    return newBlock;\r\n  }\r\n\r\n  public getLastBlock(): Block {\r\n    return this.blocks[this.blocks.length - 1];\r\n  }\r\n\r\n  public static now(): number {\r\n    return Math.round(new Date().getTime() / 1000);\r\n  }\r\n\r\n  public getBlockNumber(): number {\r\n    return this.blocks.length;\r\n  }\r\n\r\n  public getContracts(): any {\r\n    const currentNodeIdx = this.nodes.findIndex(\r\n      node => node.id === this.nodeId\r\n    );\r\n    if (currentNodeIdx === -1) {\r\n      throw new Error(\r\n        `blockchain.ts: getContracts -> could not find ${this.nodeId}`\r\n      );\r\n    }\r\n\r\n    console.log(`get Contracts ${this.nodeId}`);\r\n    return this.nodes[currentNodeIdx].accounts.filter(\r\n      account => account.type === CONTRACT_ACCOUNT\r\n    );\r\n  }\r\n\r\n  public submitContract(\r\n    contractName: string,\r\n    value: number,\r\n    type: string,\r\n    data: string\r\n  ): any {\r\n    const parsedContract = eval(data);\r\n    const currentNodeIdx = this.nodes.findIndex(\r\n      node => node.id === this.nodeId\r\n    );\r\n    this.nodes[currentNodeIdx].accounts.push(\r\n      new ContractAccount(contractName, value, type, data)\r\n    );\r\n\r\n    this.submitTransaction(\r\n      new ContractTransaction(\r\n        this.nodeId,\r\n        contractName,\r\n        \"NONE\",\r\n        \"NONE\",\r\n        value,\r\n        ACTIONS.CREATE_CONTRACT_ACCOUNT,\r\n        0,\r\n        \"NONE\",\r\n        \"NONE\",\r\n        \"NONE\",\r\n        [],\r\n        \"NONE\",\r\n        data\r\n      ),\r\n      false\r\n    ); // init nonce\r\n    return parsedContract;\r\n  }\r\n}\r\n"]}