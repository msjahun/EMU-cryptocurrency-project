{"version":3,"file":"05_hash_function.js","sourceRoot":"","sources":["../../src/workshop/05_hash_function.ts"],"names":[],"mappings":";;AAAA,yCAAmC;AACnC,yDAAqD;AAIrD;IAKE,YAAY,aAAsB,EAAE,gBAAyB,EAAE,KAAa;QAC1E,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;CACF;AAVD,kCAUC;AAED;IAOE,YAAY,WAAmB,EAAE,YAAgC,EAAE,SAAiB,EAAE,KAAa,EACjG,SAAiB;QACjB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED,yEAAyE;IAClE,MAAM;QACX,MAAM,CAAC,kBAAM,CAAC,IAAI,CAAC,SAAS,CAAC,sBAAS,CAAQ,IAAI,CAAC,CAAC,CAAC,CAAC;IACxD,CAAC;CACF;AApBD,sBAoBC;AAED;IAKE,YAAY,MAAc;QACxB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;IAC5B,CAAC;IAED,0BAA0B;IACnB,iBAAiB,CAAC,aAAsB,EAAE,gBAAyB,EAAE,KAAa;QACvF,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,aAAa,EAAE,gBAAgB,EAAE,KAAK,CAAC,CAAC,CAAC;IACrF,CAAC;IAED,uCAAuC;IAChC,WAAW;QAChB,MAAM;IACR,CAAC;CACF;AApBD,gCAoBC","sourcesContent":["import { sha256 } from \"js-sha256\";\r\nimport { serialize } from \"serializer.ts/Serializer\";\r\n\r\nexport type Address = string;\r\n\r\nexport class Transaction {\r\n  public senderAddress: Address;\r\n  public recipientAddress: Address;\r\n  public value: number;\r\n\r\n  constructor(senderAddress: Address, recipientAddress: Address, value: number) {\r\n    this.senderAddress = senderAddress;\r\n    this.recipientAddress = recipientAddress;\r\n    this.value = value;\r\n  }\r\n}\r\n\r\nexport class Block {\r\n  public blockNumber: number;\r\n  public transactions: Array<Transaction>;\r\n  public timestamp: number;\r\n  public nonce: number;\r\n  public prevBlock: string;\r\n\r\n  constructor(blockNumber: number, transactions: Array<Transaction>, timestamp: number, nonce: number,\r\n    prevBlock: string) {\r\n    this.blockNumber = blockNumber;\r\n    this.transactions = transactions;\r\n    this.timestamp = timestamp;\r\n    this.nonce = nonce;\r\n    this.prevBlock = prevBlock;\r\n  }\r\n\r\n  // Calculates the SHA256 of the entire block, including its transactions.\r\n  public sha256(): string {\r\n    return sha256(JSON.stringify(serialize<Block>(this)));\r\n  }\r\n}\r\n\r\nexport class Blockchain {\r\n  public nodeId: string;\r\n  public blocks: Array<Block>;\r\n  public transactionPool: Array<Transaction>;\r\n\r\n  constructor(nodeId: string) {\r\n    this.nodeId = nodeId;\r\n    this.blocks = [];\r\n    this.transactionPool = [];\r\n  }\r\n\r\n  // Submits new transaction\r\n  public submitTransaction(senderAddress: Address, recipientAddress: Address, value: number) {\r\n    this.transactionPool.push(new Transaction(senderAddress, recipientAddress, value));\r\n  }\r\n\r\n  // Creates new block on the blockchain.\r\n  public createBlock() {\r\n    // TBD\r\n  }\r\n}\r\n"]}