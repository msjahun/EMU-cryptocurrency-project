{"version":3,"file":"server.js","sourceRoot":"","sources":["../src/server.ts"],"names":[],"mappings":"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","sourcesContent":["import { sha256 } from \"js-sha256\";\r\nimport { serialize, deserialize } from \"serializer.ts/Serializer\";\r\nimport { isArray } from \"lodash\";\r\nimport BigNumber from \"bignumber.js\";\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nimport deepEqual = require(\"deep-equal\");\r\nimport * as uuidv4 from \"uuid/v4\";\r\nimport * as express from \"express\";\r\nimport * as bodyParser from \"body-parser\";\r\nimport { URL } from \"url\";\r\nimport axios from \"axios\";\r\nimport { Set } from \"typescript-collections\";\r\nimport * as parseArgs from \"minimist\";\r\nimport { Address, ContractAccount, CONTRACT_ACCOUNT } from \"./accounts\";\r\nimport { ACTIONS } from \"./actions\";\r\nimport {\r\n  Transaction,\r\n  ContractTransaction,\r\n  AccountTransaction\r\n} from \"./transaction\";\r\nimport { Block } from \"./block\";\r\nimport { Node } from \"./node\";\r\nimport { Blockchain } from \"./blockchain\";\r\nimport {\r\n  getNodeAndAccountIndex,\r\n  getNodeAndContractIndex,\r\n  getConsensus,\r\n  getDigitalSignature,\r\n  isCrossOriginRequest,\r\n  getPublicKey,\r\n  encryptPasswords\r\n} from \"./utils\";\r\n\r\n// Web server:\r\nconst ARGS = parseArgs(process.argv.slice(2));\r\nconst PORT = ARGS.port || 3002;\r\nconst app = express();\r\nconst nodeId = ARGS.id || uuidv4();\r\nconst blockchain = new Blockchain(nodeId);\r\n\r\n// Set up bodyParser:\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(bodyParser.json());\r\napp.use(\r\n  (\r\n    err: any,\r\n    req: express.Request,\r\n    res: express.Response,\r\n    next: express.NextFunction\r\n  ) => {\r\n    console.error(err.stack);\r\n    res.status(500);\r\n  }\r\n);\r\n\r\n// Show all the blocks.\r\napp.get(\"/blocks\", (req: express.Request, res: express.Response) => {\r\n  res.json(serialize(blockchain.blocks));\r\n});\r\n\r\n// Show specific block.\r\napp.get(\"/blocks/:id\", (req: express.Request, res: express.Response) => {\r\n  const id = Number(req.params.id);\r\n  if (isNaN(id)) {\r\n    res.json(\"Invalid parameter!\");\r\n    res.status(500);\r\n    return;\r\n  }\r\n\r\n  if (id >= blockchain.blocks.length) {\r\n    res.json(`Block #${id} wasn't found!`);\r\n    res.status(404);\r\n    return;\r\n  }\r\n\r\n  res.json(serialize(blockchain.blocks[id]));\r\n});\r\n\r\napp.post(\"/blocks/mine\", (req: express.Request, res: express.Response) => {\r\n  // Mine the new block.\r\n  const newBlock = blockchain.createBlock();\r\n\r\n  res.json(`Mined new block #${newBlock.blockNumber}`);\r\n});\r\n\r\napp.post(\"/createAccount\", (req: express.Request, res: express.Response) => {\r\n  const { address, balance, account_type, nodeId } = req.body;\r\n  const createdNode = blockchain.createAccount(\r\n    address,\r\n    balance,\r\n    account_type,\r\n    nodeId\r\n  );\r\n\r\n  // Verify creation of Node\r\n  if (!createdNode) {\r\n    res.json(\r\n      `CreateAccount Failed to create node with address ${address}, balance ${balance}, type ${account_type} `\r\n    );\r\n    res.status(404);\r\n    return;\r\n  }\r\n\r\n  // Success msg\r\n  res.json(\r\n    `Creation of account ${address} of type ${account_type} with balance ${balance}`\r\n  );\r\n});\r\n\r\napp.get(\r\n  \"/publicKey/:node/:accountName\",\r\n  (req: express.Request, res: express.Response) => {\r\n    const { node, accountName } = req.params;\r\n    console.log(`Account name: ${accountName}`);\r\n    const pubkey = getPublicKey(blockchain, node, accountName);\r\n    res.json(pubkey);\r\n  }\r\n);\r\n\r\napp.get(\r\n  \"/encryptPassword/:password\",\r\n  (req: express.Request, res: express.Response) => {\r\n    const { password } = req.params;\r\n    const encryptedPasswordDictionary = encryptPasswords(blockchain, password);\r\n    res.json(encryptedPasswordDictionary);\r\n  }\r\n);\r\n\r\napp.post(\r\n  \"/updateAccountData\",\r\n  (req: express.Request, res: express.Response) => {\r\n    const { sourceOfTruthNode, nodes } = req.body;\r\n    blockchain.updateAccounts(nodes, sourceOfTruthNode);\r\n    res.json(\r\n      `Updating accounts in ${nodeId} data with accounts in node ${sourceOfTruthNode}`\r\n    );\r\n  }\r\n);\r\n\r\napp.post(\r\n  \"/propogateAccountCreation\",\r\n  (req: express.Request, res: express.Response) => {\r\n    const { address, balance, account_type, nodeId } = req.body;\r\n    const createdNode = blockchain.createAccount(\r\n      address,\r\n      balance,\r\n      account_type,\r\n      nodeId\r\n    );\r\n\r\n    // Verify creation of node\r\n    if (!createdNode) {\r\n      res.json(\r\n        `PropogateAccountCreation failed to create node with address ${address}, balance ${balance}, type ${account_type} `\r\n      );\r\n      res.status(404);\r\n      return;\r\n    }\r\n\r\n    // Propogate account to rest of Nodes on network\r\n    const requests = blockchain.nodes\r\n      .filter(node => node.id !== nodeId)\r\n      .map(node =>\r\n        axios.post(`${node.url}createAccount`, {\r\n          address: address,\r\n          balance: balance,\r\n          nodeId: nodeId,\r\n          account_type: account_type\r\n        })\r\n      );\r\n\r\n    axios\r\n      .all(requests)\r\n      .then(axios.spread((...responses) => responses.map(res => res.data)))\r\n      .catch(err => {\r\n        console.log(err);\r\n        res.status(500);\r\n        res.json(err);\r\n        return;\r\n      });\r\n\r\n    res.status(500);\r\n    console.log(\r\n      `Created:\r\n      Account:${address}\r\n      Type: ${account_type}\r\n      Balance: ${balance}`\r\n    );\r\n    res.end();\r\n  }\r\n);\r\n\r\napp.get(\"/contracts\", (req: express.Request, res: express.Response) => {\r\n  const contracts = blockchain.getContracts();\r\n  res.json(contracts);\r\n});\r\n\r\napp.post(\"/deployContract\", (req: express.Request, res: express.Response) => {\r\n  const { contractName, contract, value, type } = req.body;\r\n  blockchain.submitContract(contractName, value, type, contract);\r\n  res.end();\r\n});\r\n\r\napp.post(\r\n  \"/propogateContract\",\r\n  (req: express.Request, res: express.Response) => {\r\n    const { address, value, type, data } = req.body;\r\n    blockchain.submitContract(address, value, type, data);\r\n\r\n    const requests = blockchain.nodes\r\n      .filter(node => node.id !== nodeId)\r\n      .map(node =>\r\n        axios.post(`${node.url}deployContract`, {\r\n          contractName: address,\r\n          contract: data,\r\n          value: value,\r\n          type: type\r\n        })\r\n      );\r\n\r\n    if (requests.length === 0) {\r\n      res.json(\"There are no nodes to sync with!\");\r\n      res.status(404);\r\n\r\n      return;\r\n    }\r\n    axios\r\n      .all(requests)\r\n      .then(\r\n        axios.spread((...responses) =>\r\n          responses.map(res => console.log(res.data))\r\n        )\r\n      )\r\n      .catch(err => {\r\n        console.log(err);\r\n        res.status(500);\r\n        res.json(err);\r\n        return;\r\n      });\r\n    res.json(`Successfully deployed ${address} contract`);\r\n  }\r\n);\r\n\r\napp.put(\r\n  \"/mutateContract/:address\",\r\n  (req: express.Request, res: express.Response) => {\r\n    const { address } = req.params;\r\n    const {\r\n      method,\r\n      initiaterNode,\r\n      initiaterAddress,\r\n      value,\r\n      action,\r\n      args\r\n    } = req.body;\r\n\r\n    const { nodeIdx, accountIdx } = getNodeAndContractIndex(\r\n      blockchain.nodes,\r\n      nodeId,\r\n      address,\r\n      \"Could not find contract node or address\"\r\n    );\r\n\r\n    const digitalSignature = getDigitalSignature(\r\n      blockchain.nodes,\r\n      initiaterNode,\r\n      initiaterAddress,\r\n      action\r\n    );\r\n\r\n    // Add transaction to blockchain\r\n    const transaction = blockchain.submitTransaction(\r\n      new ContractTransaction(\r\n        nodeId,\r\n        address,\r\n        \"NONE\",\r\n        \"NONE\",\r\n        100,\r\n        ACTIONS.TRANSACTION_CONTRACT_ACCOUNT,\r\n        blockchain.nodes[nodeIdx].accounts[accountIdx].nonce,\r\n        initiaterNode,\r\n        initiaterAddress,\r\n        method,\r\n        args,\r\n        digitalSignature\r\n      ),\r\n      false\r\n    );\r\n\r\n    res.end();\r\n  }\r\n);\r\n\r\n// Show all transactions in the transaction pool.\r\napp.get(\"/transactions\", (req: express.Request, res: express.Response) => {\r\n  res.json(serialize(blockchain.transactionPool));\r\n});\r\n\r\napp.post(\"/transactions\", (req: express.Request, res: express.Response) => {\r\n  const {\r\n    senderNodeId,\r\n    senderAddress,\r\n    recipientAddress,\r\n    recipientNodeId,\r\n    action,\r\n    method,\r\n    data\r\n  } = req.body;\r\n  // if (isCrossOriginRequest(senderNodeId, nodeId)) {\r\n  //   console.log(\r\n  //     `Cross Origin Requests are prohibited ${senderNodeId} ${nodeId}`\r\n  //   );\r\n  //   return;\r\n  // }\r\n  const value = Number(req.body.value);\r\n\r\n  if (\r\n    !senderNodeId ||\r\n    !senderAddress ||\r\n    !recipientAddress ||\r\n    !recipientNodeId ||\r\n    !value ||\r\n    !action\r\n  ) {\r\n    res.json(\"Invalid parameters!\");\r\n    res.status(500);\r\n    return;\r\n  }\r\n\r\n  const digitalSignature = getDigitalSignature(\r\n    blockchain.nodes,\r\n    senderNodeId,\r\n    senderAddress,\r\n    action\r\n  );\r\n\r\n  const { nodeIdx, accountIdx } = getNodeAndAccountIndex(\r\n    blockchain.nodes,\r\n    senderNodeId,\r\n    senderAddress,\r\n    `POST: /transactions: senderAddress ${senderAddress} is invalid...`\r\n  );\r\n\r\n  const newAccntTx = blockchain.nodes[nodeIdx].accounts[\r\n    accountIdx\r\n  ].createTransaction(\r\n    senderNodeId,\r\n    senderAddress,\r\n    recipientAddress,\r\n    recipientNodeId,\r\n    value,\r\n    action,\r\n    digitalSignature\r\n  );\r\n\r\n  blockchain.submitTransaction(newAccntTx, true);\r\n\r\n  res.end();\r\n});\r\n\r\napp.get(\"/nodes\", (req: express.Request, res: express.Response) => {\r\n  res.json(serialize(blockchain.nodes));\r\n});\r\n\r\napp.post(\"/nodes\", (req: express.Request, res: express.Response) => {\r\n  const id = req.body.id;\r\n  const url = new URL(req.body.url);\r\n\r\n  if (!id || !url) {\r\n    res.json(\"Invalid parameters!\");\r\n    res.status(500);\r\n    return;\r\n  }\r\n\r\n  const node = new Node(id, url);\r\n\r\n  if (blockchain.register(node)) {\r\n    res.json(`Registered node: ${node}`);\r\n  } else {\r\n    res.json(`Node ${node} already exists!`);\r\n    res.status(500);\r\n  }\r\n});\r\n\r\napp.put(\"/nodes/consensus\", (req: express.Request, res: express.Response) => {\r\n  // Fetch the state of the other nodes.\r\n  getConsensus(req, res, blockchain, nodeId);\r\n  res.end();\r\n});\r\n\r\n// Start server\r\nif (!module.parent) {\r\n  app.listen(PORT);\r\n\r\n  console.log(`Web server started on port ${PORT}. Node ID is: ${nodeId}`);\r\n}\r\n"]}